; Keep these in sync with struct u_data!!
U_DATA__U_PTAB              equ (_udata+0)   ; struct p_tab*
U_DATA__U_PAGE              equ (_udata+2)   ; uint16_t
U_DATA__U_PAGE2             equ (_udata+4)   ; uint16_t
U_DATA__U_INSYS             equ (_udata+6)   ; bool
U_DATA__U_CALLNO            equ (_udata+7)   ; uint8_t
U_DATA__U_SYSCALL_SP        equ (_udata+8)   ; void *
U_DATA__U_RETVAL            equ (_udata+10)   ; int16_t
U_DATA__U_ERROR             equ (_udata+12)  ; int16_t
U_DATA__U_SP                equ (_udata+14)  ; void *
U_DATA__U_ININTERRUPT       equ (_udata+16)  ; bool
U_DATA__U_CURSIG            equ (_udata+17)  ; int8_t
U_DATA__U_ARGN              equ (_udata+18)  ; uint16_t
U_DATA__U_ARGN1             equ (_udata+20)  ; uint16_t
U_DATA__U_ARGN2             equ (_udata+22)  ; uint16_t
U_DATA__U_ARGN3             equ (_udata+24)  ; uint16_t
U_DATA__U_ISP               equ (_udata+26)  ; void * (initial stack pointer when _exec()ing)
U_DATA__U_TOP               equ (_udata+28)  ; uint16_t
U_DATA__U_BREAK             equ (_udata+30)  ; uint16_t
U_DATA__U_CODEBASE          equ (_udata+32)  ; uint16_t
U_DATA__U_SIGVEC            equ (_udata+34)  ; table of function pointers (void *)

; Keep these in sync with struct p_tab!!
P_TAB__P_STATUS_OFFSET      equ 0
P_TAB__P_FLAGS_OFFSET	    equ 1
P_TAB__P_TTY_OFFSET         equ 2
P_TAB__P_PID_OFFSET         equ 3
P_TAB__P_PAGE_OFFSET        equ 15

P_RUNNING                   equ 1            ; value from include/kernel.h
P_READY                     equ 2            ; value from include/kernel.h

PFL_BATCH		    equ 4            ; value from include/kernel.h

OS_BANK                     equ 0            ; value from include/kernel.h

EAGAIN                      equ 11           ; value from include/kernel.h


; Keep in sync with struct blkbuf
BUFSIZE 		    equ 520
