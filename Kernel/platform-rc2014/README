TODO
- Switch to tinydisk
- QUART CTS/RTS
- TMS9918A - stop console flipping when in gfx mode
- Maccasoft video - debug and add video ioctls
- Ioctls on Macca video for modes and access
- Can we do macca udg by pretending it's a normal 8x8 bitmap ?
- Sprite ioctls
- Ioctls to assign consoles to video cards
- Sound
- Debug EF9345 console switch and cursor handling
- EIPC and devgpio
- EasyZ80 and TinyZ80 double check CTC timings and speed (easyz80 should be
  right)
- Maybe bank buffers in upper half of bank 3

This is Fuzix for the RC2014 and related machines

The starting point was Scott Baker's git tree but this has been seen been
rather reworked. 

Modified for RC2014 with FlashROM/Ram board by Scott Baker <smbaker@gmail.com>.

Heavily based on prior work by Will Sowerbutts <will@sowerbutts.com>, 
Sergey Kiselev <skiselev@gmail.com>, and others.

Supported Hardware

	RC2014 Z80 card or compatible including Z180 cards with the banked
	memory card although the native Z180 port and flat 512K/512K is
	recommended instead.

	512K ROM / RAM board. This board is basically a clone of the memory
	management subsystem of the Zeta V2. It replaces the RC2014's
	default ROM and RAM boards.

	A serial IO board. Either an RC2014 SIO/2 board or a later narrow
	decoding 68B50 adapter (eg 'The Missing Module') set to 0x80, or
	a 16550A serial board or QUART. The serial type is autodetected.

	A clock source (CTC, QUART or TMS9918A), or an RTC. A true timer
	interrupt source is strongly recommended as the RTC cannot provide
	true timer events and really slows the system down. The timer is
	autodetected.

	Alternatively the Z80 KIO board at 0x80 can be used instead of the
	serial and CTC cards. It also provides SD card bit bang

	Options:

	Z80DMA at 0x04 (autodetected)

	ZXKey keyboard interface (boot option "zxkey"). Works with the TMS9918A
	videocard to provide a classic 'keyboard/screen' interface.

	PS/2 bitbang keyboard interface at 0xBB. Works with the TMS9918A
	videocard or EF9345 to provide a classic 'keyboard/screen' interface.
	(autodetected)

	PS/2 hardware keyboard at 0x60/64 - works the same as the bitbang one
	but uses vastly less CPU time

	16x50 cards at 0xA0/0xC0-0xF8 (the range is scanned).

	DS1302 RTC at 0x0C/0xC0	(autodetected)

	RC2014 CTC at 0x88	(eg SC102, autodetected)

	QUART at 0xBA		(autodetected)

	Z80PIO, or Gluino at 0x68 providing SD card bitbang or GPIO
				(assumed present, no harm if not)

	SC129 at 0x00 as GPIO or at 0x69 to drive an SD card
				(assumed present, no harm if not)

	TMS9918A at 0x98/0x99. Must be jumpered as an interrupt source. For
	version 3 or earlier note the errata and jumper it with a 1N4148
	diode or similar. (autodetected)

	The RC2014 CF card interface, or compatible at 0x10. (autodetected)

	EP Floppy Drive Interface	(autodetected)

	RC2014 Joystick		(assumed present, no harm if not)

	PPIDE at 0x20

	KIO at 0x80

	Z80-512K CLK2 divider (not yet tested)

	Console switch card at 0xFF as GPIO (assumed present, no harm if not)

	EF9345 video card for 80 column text

	PropGFX card at 0x40. This will be used to provide two 40 column
	VGA consoles. Must be configured at compile time as there is no
	autodetect possible.

	MG014 Printer at 0x0C for printing and ZIP drive (PPA ZIP)

	WizNET 5100 or 5300 carrier cards (5300 is the standard build,
	5100 requires changing the command options).

Pending
	Sound cards (until Fuzix gets proper audio support)
	I2C at 0x6C

Unsupported Hardware

	Z180 in flat mode (see rcbus-z180 target)

	SC108/SC114/Z80SBC64 or other CPU boards with their own banking instead
	of the 512K ROM/RAM. Please see the relevant port instead.

	SC111 or other Z180 CPU board with linear mapped RAM. See the SC111
	port instead.

	SC110 CTC/serial (does not appear to be able to chain CTC pairs, as
	is neeed for IM1 mode). You can run a wire by hand. Can still be used
	for serial baud control.

	Picked Dog 128/128K and 512/512K boards (different memory paging
	model to the standard RC2014)

I/O Port Settings For Fuzix

0x00		SC129 GPIO
0x01		Joystick 0
0x02		Joystick 1
0x03		Free
0x04		Z80DMA
0x05		Free
0x06-0x07	I2C
[0x08-0x0B	Shared memory interface - user only]
0x0C-0x0F	82C55 Printer Port (MG014)	|	DS1302 (Z180)
0x10-0x17	IDE CF
[0x18-0x1F	Second IDE CF (not supported)]
0x20-0x23	IDE PPA
[0x24-0x27	Second PPA (not supported)]
0x28-0x2D	Wiznet module
0x30-0x41	Free
(provisionally 30-37 SPIMaster)
0x42-0x43	AMD9511A FPU
0x44-0x47	EF9345
0x48-0x4D	Floppy controller (EPFDC)
0x48-0x58	Floppy controller (RC2014 *)
0x59-0x5F	Free (0x4E-0x5F free EPFDC)
0x60		PS/2				|	Z80PIO
0x61-0x63	Free				|	Z80PIO
0x64		PS/2				|	Z80PIO
0x65-0x67	Free				|	Z80PIO
0x68-0x6B	Z80 PIO/Gluino (and SD card)
0x6C-0x6F	Z80 second PIO			| 	Z80 PIO2 suggested
0x70-0x7F	MMU
0x80-0x83	Z80 SIO				|	KIO
0x84-0x87	Z80 SIO				|	KIO
0x88-0x8B	Z80 CTC				|	KIO
0x8C-0x8F	Free
0x90-0x97	IDE CF on EIPC and EasyZ80	|	Older CF mirrors here
0x98-0x99	TMS9918A/38/58
0x9A-0x9B	TMS9938/58
0x9C-0x9F	Free
0xA0-0xA7	16x50 Serial			|	SC26C92 serial       |    ACIA
		Also used sometimes for sound (0xA0-0xA2)
0xA8-0xAF	Free				|	SC26C92 serial (ctd)
[0xB0-0xB7	Analog Sticks - TODO]
0xB8		Bus extender
0xB9		Free
0xBA		QUART serial
0xBB		PS/2 Bitbang
0xBC		Z80 Coprocessor
0xBD-0xBF	Free
0xC0		DS1302 clock			|	Z180 Internal I/O     |    DS12885
0xC0-0xFF	Scanned for extra 16x50		|	Z180 Internal I/O
0xD0		AY-3-8910 (TODO)		|
0xD8		AY-3-8910 (TODO)		|
0xED						|	Also used by Z512
0xFE		ZXKey shadow
0xFF		ZXkey (W) Console switches (R)

Alternatives
0x80	KIO
0x00	Z84C15
0xC0-FF	Z180 internal I/O

(*) FDC uses 48/50/51/58


RC2014 Extreme

This build uses the bus extender and moves the following

Joystick 1 and 2		01-02B8
Wiznet 5300			28-2DB8
PS/2				60B8,64B8
I2C will move 			6C-6FB8
Analog sticks will move		B0-B7B8
RTC				C08B
Sound (AY-3-8910, TODO)		D0/D8B8
MG ZIP/Lpr			0C-0FB8
PropGFX Video			40-43B8	(with link for halt)
I2C				06B8/07B8

Things To Note When Modifying

  * Do not move discard below C300 on a 16K banking setup. There is stuff in
    start.c that requires that C000-C2FF space is free for starting init from
    the kernel.

Things that don't work

  * Flow control isn't yet enabled for the serial port.

Stuff To Do

  * Swap (it's there but could do with more debug)

  * Sound support once we have the core sound layer

  * Go the soft IRQ route with fast SIO serial handling for rx interrupts and
    flip buffers. Also raises space issues as we'll need 256 bytes per SIO
    plus the other costs (Can we defer all but console and steal from the
    top of discard)

  * New networking layuer

Setting It Up

Fuzix on the RC2014 expects a normal PC style compact flash card. Fdisk up the
card leaving the low space free as fdisk tries to do. Place a file system on
it (type 0x7E). Do not at this point place a swap partition on it (0x7F)
although you can certainly reserve on with a different type code.

The loader and attached kernel image needs to be written to blocks 2+.

"make diskimage" will do all the work to generate a file system, CF card image
and emulator image in Images/rc2014/.

if you need to do it by hand

If you are doing this with the emulator then the easiest way is to use makedisk
to create a disk of suitable size and then

	dd if=foo.cf of=foo.raw skip=2
	fdisk foo.raw

	add the file systems etc onto it (either by loopback mounting or
	using dd remembering the start sector given can be used with
		dd bs=512 seek=startsector conv=notrunc ...

	dd if=foo.raw of=foo.cf seek=2 conv=notrunc

When working on a real CF card or the raw file add the bootable image with

	dd if=fuzix.romwbw of=/dev/sdxx seek=2 conv=notrunc

to place the bootable image on sectors 2 and above in the hole the fdisk tool
leaves for a bootable image.

You can manipulate the filesystem with ucp.

As ucp and fsck.fuzix support offsets in the format path:offset you can access
the first file system with ucp emu-ide.img:1049600 if it starts at block 2048
of the emulated CF card. (use 1048576 for a real CF)

Then you can run

rc2014 -b -r RCZ80_std.rom  -i emu-ide.cf  -s -w -R -c

or for a KIO system

rc2014 -b -k -r RCZ80_kio.rom -i emu-ide.cf -R

or for a PPIDE setup

rc2014 -b -k -r RCZ80_std.rom -I emu-ide.cf -R

or for a TinyZ80

rc2014 -m tinyz80 -r /tmp/EZZ80_tz80.rom -i emu-ide.img
