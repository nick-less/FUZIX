Use a modern cc65 from https://github.com/cc65/cc65


Our memory mapping looks like this

Bank 0:
	0x0000		Kernel DP
	0x0100		UData + C stack etc
	0x0300		Bootcode
	...		Kernel image
	0xF000		7 x 256 byte CPU stacks for processes paired
			with their direct pages
	0xFE00		I/O page
	0xFF00		Vectors	and IRQ DP	[packed at 0 in image]

And in user space

	0x0000		Unused
	0x00FE		syscall vector
	0x0100		Program (CPU stack is in bank 0)
	0xFC00		Udata copy (512 bytes)
	0xFE00		Spare
	0xFF00		Stubs [signal return etc]
			(keep in 0 page ?)

We don't yet allow for a split I/D program using two banks and having 64K
code and 64K data.

To build:
Set the platform/target
make clean
make

and you'll get an image file to dd onto the last 64K of your disk image for
the emulator.

TODO
----
- Add swap logic
- Relocatable binaries
- cc65 stubs optimized for 65c816
- debug and properly implement abort/brk handlers to kill process etc
- crt0 entry stacking of ZP state in user
- video/console support
- switch to partition supporting block I/O as we have space for it

Optimisations We Need To Do
--------------------------------------------------------------
- Only copy the needed memory when forking, not 64K ?
- Can we keep udata in kernel ZP (at least for level 1). Would need to
  audit that we don't take pointers to ZP but might be faster and we
  need to do the same audit for some cases with 68K etc anyway
- Can we put the kernel per process CPU stack (kstack) into the upper half
  of ZP for each process. We don't need 256 bytes of ZP per process
- Can we trim down to say 64 bytes ZP + 256 stack per process so we can go
  above 8MB - do we care ??
