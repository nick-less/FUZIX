TO9 Experiment
==============

The TO9 sits between the TO7/70 and the TO8 systems. It lacks the ability to move the video from bank 0 but
it does support 40 column single page mono display. That is sufficient for our purposes but more limited.
To handle this properly we really need banked gcc 6809 mods doing.

This code will not work on the TO7/70 alas. The 7/70 has no method to move
the video or claim back part of the video memory, whilst on the TO9 we can
force 8K two colour mode for the console and use the other 8K as common RAM
space.

Status:
-	Starts init, blows up forking.

TODO:
-	Recognize extra 64K memory banks
-	Fork code finish
-	Swap. As with to8 will need custom bank handling for the swap out
	of the live task because we copy to work around the memory
	banking limitations.

The memory management is more restrictive and involves PIA incantations
DDRB is set 0F, 17, E7, 47, 67, 27
	(and TO9 specific 0x07 then bank is bits 6,2 of the output port for expansion module)
	(not apparently the case on a 9+ for extra pages)

Memory Map:

0000-3FFF	Banked ROM 	0-3	Cartridge ROM (in our case it'll need to be a Fuzix cart)
4000-5FFF	2 x 8K bank	Bank 0 in 2 8K chunks (some modes need 1 some 2 some use 2 banks)
				(Video is always in this bank)
6000-9FFF	Banked RAM
6000-60FF	Reserved for firmware
6100-9FFF	Fixed RAM	1
A000-DFFF	Banked RAM	6 banks for the rest of the 128K) another 4 differently encoded
				  if the RAM expansion is present
E000-E7AF	ROM (disc usually)
E7B0-E7FF	Devices
E800-FFFF	ROM		0-1

Memory mapping:

Cartridge	:	0000-3FFF	Kernel low bank (could page but don't except for boot copies)
Video		:	4000-5FFF	Half kernel, half video for TO9.	Common here ?
Fixed 16K	:	6000-9FFF	User fixed (6000-60FF reserved by monitor)
Bank 1		:	A000-DFFF	Kernel upper segment
ROM/Monitor/IO	:	E000-FFFF	Including font eventually with luck

User Mapping
Cartridge	:	0000-3FFF	Kernel low bank (can't move video on a TO9)
Video		:	4000-5FFF	Common
Fixed 16K	:	6000-9FFF	Fixed user
Bank n		:	A000-DFFF	1-5 available

Task switching requires we copy 16K in and out of 6000-9FFF.

Initial model
swap in and out using
	2,3
	4,5
and for 192K
	6,7
	8,9

Using an exchange model as the MO6 will need would let us get 1 more process in RAM using 1 and current

Need to work out how to make bootable cartridges

Requirements:
Interrupt stacks must be in common space. We rely on the low code being big enough to push them that far up memory
All common must be above 0x4000

Drivers:

Keyboard	-	via ROM (real interface is complicated)
Light pen	-	via ROM
Mouse		-	via ROM
Video		-	vt (but lie a bit to the ROM early on to get the mouse in 640 pixel wide mode ?)
Floppy Disk	-	has to be via ROM. boot block is encrypted and weird. Skip drives of type 'S'
			as they are SDDrive
Hard disk	-	via SDDrive and friends - slow but will have to do - tinysd plus bitbangers
Timer int	-	via ROM hook. Push a fake RTI frame and run the full monitor interrupt first
Joystick	- 	see https://github.com/wide-dot/thomson-to8-game-engine/tree/main/engine
			or via ROM

Addresses
6019	bit 0x20 informs monitor of irq status
6027 to steal int ?
6025/6 to steasl NMI
602F/30 to steal SWI1
6049	drive
604A	track
604B	track lsb
604C	sector
604E	address
6074 bit 6 = 1 periphal connected to kbd
bit 7 = 1 mouse, not light pen
60CF/D0 point to ROM font in use

ROM calls:
E004	floppy driver (or E82A for vector via monitor ?)
E806	get char in B C=1  if no char
	F8-FF info like capslock
E809	C =1 char is pressed
E818	light pen returns X 0-319 Y 0-199 cc clear if got a good measurement
E81B	light pen button CC
	set 6019 |= 2 then call with B = F8-FF for functions
E827	read joystick $00 centre $01 N $02 NE $03 E etc, C is set if button pressed
EC00	set palette entry 
EC08	C left button Z right mouse
EC06	X/Y for mouse X matches mode (so need to ROM switch mode ? to convince it to report full res ?) mouse

Mode setting is via putc
1B 48 etc

Position
1F Y X 	(Y X being |0x40)
14 hide cursor
11	show cursor
1B 4x	set colour x fg
1B 5x	ditto bg ? (fond)
1B 6x	for tour ?
1B 70-7, 78-F,80-87 do same for upper 8 colours

1B 48	page 1
1B 49	page 2
1B 4A 	superpos pg 2
1B 4B	superpos pg 1
1B 59	bitmap 4
1B 5A	40 col
1B 5B	80 col
1B 5E	16 col bitmap
1B 88-8B superposition pages 0-3

interrupts

FIR light pen
IRQ 6846 - timept, irqpt

E7E8-E7EB 6551 on RS232 card


Make cartridge visible

LDA $E7C3
ANDA FB
STA $E7C3
LDA $E7E6
ANDA DF
STA $E7E6

Cartridge header

23 x ascii
0x0D
0x0000
0xNN		(checksum of previous bytes to equal $55)
0x00
warm-entry.w
cold-entry.w
