#
#	We map the various bank into different files as if they were at the
#	bank 0 addresses. We don't want any far references but to rely upon
#	bank registers
#

MEMORY {
#Bank0
	RAMZ:	start = $0000, size = $0100, type = rw, fill = yes;
	STACKS: start = $0100, size = $0300, type = rw, fill = yes;
	USEG:	start = $0400, size = $FA00, type = rw, fill = yes;
	IO:	start = $FE00, size = $0100, type = rw, fill = yes;
	STUB:	start = $FF00, size = $00E0, type = rw, fill = yes;
	VECTOR:	start = $FFE0, size = $0020, type = rw, fill = yes;
#Bank1
	MAIN:	file = "fuzix.i", start = $0300, size = $EF00, type = rw, fill = yes;
#Bank2
# DUMMY is a hack so we don't get udata in ZP for now
	DUMMY:	file = "fuzix.d", start = $0000, size = $0100, type = rw, fill = yes;
	UDATA:	file = "fuzix.d", start = $0100, size = $0200, type = rw, fill = yes;
	BSEG:	file = "fuzix.d", start = $0300, size = $FD00, type = rw, fill = yes;
}

SEGMENTS {
	ZEROPAGE:	load = RAMZ, type = zp, define = yes;

	COMMONDATA: 	load = UDATA, type = bss;

	STACK:		load = STACKS, type = rw;

	START:		load = MAIN, type = ro;
	CODE:		load = MAIN, type = ro, define = yes;

	RODATA:		load = BSEG, type = ro;

	DATA:		load = BSEG, type = rw, define = yes;

	DISCARD: 	load = MAIN, type = ro;
	DISCARDDATA: 	load = BSEG, type = ro;

	BSS:		load = BSEG, type = bss, define = yes;

	STUBS:		load = STUB, type = ro;
	VECTORS: 	load = VECTOR, type = ro;
}

FILES {
	%O: format = bin;
	"fuzix.i": format = bin;
	"fuzix.d": format = bin;
}
