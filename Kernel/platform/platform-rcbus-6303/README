Fuzix on the 6303 RCBUS banked memory platform

Proposed memory mapping

	0x0000-0x001F	On chip I/O
	0x0020-0x0027	Reserved (I/O on some chips)
	0x0028-0x003F	Banked direct page (kernel)
	0x0040-0x007F	May be banked or unbanked (kernel)
	0x0080-0x00FF	Internal (unbanked) direct page (kernel)
	0x0100-0x03FF	Loader space for now (can be reclaimed later)
	0x0400-0xF7FF	Kernel
	0xF800-0xFDFF	Common data and whatever code fills the rest
	0xFE00-0xFEFF	I/O
	0xFF00-0xFFEF
	0xFFF0-0xFFFF	Vectors

In user space

	0x0000-0x001F	On chip I/O
	0x0020-0x0027	Reserved (I/O on some chips)
	0x0028-0x003F	Banked direct page (user)
	0x0040-0x007F	May be banked or unbanked (kernel)
	0x0080-0x00FF	Internal (unbanked) direct page (kernel)
	0x0100-0x03FF	Loader space for now (can be reclaimed later)
	0x0400-0xBFFF	User space
	0xC000-0xF7FF	Kernel upper code
	0xF800-0xFDFF	Common data and whatever code fills the rest
	0xFE00-0xFEFF	I/O
	0xFF00-0xFFEF
	0xFFF0-0xFFFF	Vectors

Hardware Arrangement

6303 CPU
FE00-FEFF hardwired as an I/O window that generates Z80 I/O cycles 0-FF on the
RCBUS bus
512K RAM/ROM
Internal UART

Things to address
- Dynamic buffer allocation
- SPI bitbang port
- Making the UART driver properly IRQ driven for input with its own buffer
  and separate to the Fuzix level interrupts
- Proper two level interrupt handling so that the timer drives Fuzix and
  the other stuff is queued
- Don't disable all interrupts in the Fuzix paths
- Add device support for some of the RCBUS external devices

Put the loader on sector 0
Put the kernel on sector 1+

What would cc68 ld68 banking support take ?

To run on the emulator

rc2014-6303 -b -i /tmp/emu-ide.img
