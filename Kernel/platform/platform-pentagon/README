Experimental porting work for Pentagon and similar systems that have no ability
to map RAM low.

For now we hardcode 256K and Pentagon style rules (although it seems they
vary even by pentagon type). As far as I can make out the basic rules for
each type are

Everyone uses 0x7FFD bits 0-2 = low 128K bank select, and 3 to move video

Then it gets more complicated (and the partial decode ports make it worse)

Pentagon uses bits 7/6 to allow for 512K RAM

ATM us FDFD bits 0-2

----
These machines all have the same basic problem, there is a 16K window at
C000-FFFF which is pageable but no bigger pageable range.

We run with the following mapping

0000-3FFF	System ROM (fixed)
4000-7FFF	Kernel data/common
8000-83FF	Needed to create the exec of init
8400-BFFF	_DISCARD area - blown away when we exec init
		(tons of room in this space)
C000-FFFF
	0:	Kernel CODE4 (lot of room)
	1:	Kernel CODE (fairly full)
	2:	Mapped at 0x8000-0xBFFF (holds current process copy)
	3:	User process
	4:	User process
	5:	Mapped at 0x4000-0x7FFF (kernel data/common)
	6:	Kernel CODE2 (fairly full)
	7:	CODE3, Video (fairly full)

User processes live in 3/4 and 8+. We have copy stuff back and forth
to page 2 due to the memory manager limits.

To Do:
-	Update the loader
-	Debug the code
-	Optimizations for switching (runticks expiry on non-preempt case
	should we clear runticks - pro it gets us better perf, anti it reduces
	responsiveness.
-	Parent first support


-	Why does ls /bin lose the lowest pixel row of the 'yes' command ?
	(Seems we lose the bottom line of the left most char - off by one bug
	 in zxvid ?)
-	6 or 5bit wide fonts (42, 51 column)
-	Optimize zxvid - especially scrolling
-	Move vtborder to common
-	See if we can in fact keep 6000-7FFF clear. If so we can look at
	ldir switching another 8K up and down to give 40K program sizes
	which would be a big improvement. Would need us to allocate 2.5
	banks per process however so need some allocator changes

Floppy disk interfaces are problematic. The standard Betadisk interface locks
the I/O ports to its ROM being active, which sucks.


Emulator:
