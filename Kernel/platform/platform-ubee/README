Memory Map:

First 64K

	0000-00FF		Vectors
	0100-01FF		Free
	0200-wherever		Kernel
		0x8000-0x8FFF	Video memory overlays here
	DB00			Discard	(need to fix to reclaim buffers here)
	F000			Common

The other memory is then overlaid on 0000-7FFF for user space

	0000-00FF		Vectors
	0100-7DFF		Application
	7E00-7FFF		Udata/stack cache

	(User space sees video mapped at 0x8000-8FFF)


Testing with uBee512

Use the built Kernel/platform-ubee/fuzix.ss80 as a boot image

cd Standalone/filesystem
./build-mini-filesystem root.ds82 64 1600

Then run either

	ubee512 --model=256tc -a fuzix.ss80 -b root.ds82
	ubee512	--model=p512k -a fuzix.ss80 -b root.ds82
	ubee512 --model=p128k -a fuzix.ss80 -b root.ds82 --rtc=1 --piob7=rtc

(as an RTC is required).

and when asked for the root file system reply 1

For a full on test of everything try something like

ubee512 --model=p128k -a /tmp/fuzix.ss80 --hdd3=/tmp/root.ds82 --hdd0=$(pwd)/rootfs.hd3 --port58h --modio=+hdd --modio=+mem --rtc=1 --modio=+ide --piob7=rtc

with a valid partitioned disk image including an 0x7F type partition that is
512K or so for swap. The disk image needs to be a .hd3 type as the kernel right
now assumes .hd3 geometry for ST506 drives (ie 62720 sectors)

Don't expect the IDE to work - it may work on the real box but not the emulator.



Done so far:

- Bootloader. Loads the image into 0200 using the ROM and runs it
- Code to generate an SS80 bootable disk image
- Basic initialization and setup, video and machine type probing
- Sketch of various drivers
- Basic floppy driver code
- Try mounting a file system on floppy
- Get init loading, load and test userspace
- How to tell wd1010 system from 2793 from both with 0x58 switch
	-	Select 0x58 = 0
		See if track register writes to values
		See if it changes when we flip 0x58 (try several cases)
		Y = has 0x58 switch
	-	WD 2793 has a track register we can play with which is
		mirrored on the ubee 4 registers down I think
	-	WD1010 has lots more registers

	Algorithm therefore is

	Write 0x45 (mirrrored track) Read back at 0x41/0x45 a few times

	If it mirrors to 0x41 then it's a 2793
	If it writes/reads back but does not mirror it's a WD1002-5

	Now check if writes to 0x45 affect 0x45 with 0x58 switched
	(if so its two controllers and we can repeat the probe algorithm
	for the other one)

	Finally check 0x48 on the floppies. If it has low bits set then
	it's a dream disk or if setting bits is reflected back it's a dream
	disk. So set bit 3 (DD), read back. 0x80 -> normal else DD

	*Never write 0x41 while probing as it's precomp on the WD. 0x45
	however is either cyl_high or track_w so safe
- Support attributes, colour.
- Buffer reclaim of discard memory
- Bank the video
- Debug TC keyboard code: shift/ctrl are busted
- Non TC keyboard (lightpen keyboard)
- Hard disk driver debug
- IDE driver (note the ubee512 emulator ide appears to be very busted as
  of 5.8.0)
- If we have wd1002-5 and fd wtf do we put IDE in major/minors ?
- Video support (colour, attributes)			DONE
- Map video at 0x8000					DONE
- Clear attribute ram if present			DONE
- Move common up					DONE
- Do buffer over discard change				DONE
- Check we have video latches/map right everywhere	DONE
- Init vtattr_cap and the video variables correctly	DONE (I think)
- Check if scrolling in hw is doable or not in 80x25	NO
- Support 'map video into my process at 0x8000 hack'	DONE
- Non premium video					COLOUR DONE
- Non premium video setup				COLOUR DONE
- Support RAM font setting				DONE
- Figure out how I broke the 6545 cursor		DONE
- Debugging floppy driver - need to add direct I/O to user support	DONE
- Swap							DONE
- Graphics not just vt interfaces			DONE

In Progress
- RAM based fonts					DONE (needs testing)

To Do:
- Floppy - media detect/sectors per track etc/ hard skew
- Fix reboot/panic logic
- Keyboard repeat
- Speed up RTC timer a bit for lpen based boxes so we don't miss keys

Longer Term
- Do delayed video output via a buffer off vblank event for non premium
- Proper support for Z80 PIO interfaces
- Z8530 SCC
- Maybe eventually switch to soft interrupt model and support soft serial
  interrupts (ick)


Notes:

The Microbee disk systems do various early magic and then end up in the copy
of the boot rom with rom services at E000-EFFF and using DE00-DFFF for data.
(paging register is 0x04). Disk track 0 side 0 sector 1 is loaded at $80 and
then executed from $80.

At this point you have use of the ROM services and can load more data. The
firmware routine loads sequential sectors without software skew loading in
sector order then the next track same side. It seems to check for unknown
sectors so probably works for any sector count.

Disk formats DS40, SS80 are nothing unusual (40 track or 80 track 512 bytes
per sector) but store 10 sectors per track. They are soft skewed by the OS
usually.

DS80 is weird. Tracks 0/1 behave as expected but the sectors on a DS80 for
the later tracks are numbered 21-30. The emulator only stores those sectors
so you can't use this for sane stuff

DS82 is like DS80 but without the weird skew and only 1 system track for CP/M

Fuzix should probably default to 9 sectors/track for compatibility with other
platforms, but offer switches for 10 sec and density/side detect.

(General question - should we add geometry hints to the superblock - we have
room)

There are three kinds of video

Standard:
	A 6545 with 2K of display memory and 128 8x16 ROM characters plus
	128 in programmable character memory.
	Colour option (includes flicker workaround)

Premium:
	The 6545 has
	2K character memory
	2K attribute memory
	2K colour memory
	up to 4 banks of programmable character memory

256TC:
	The 6545 has
	2K character memory
	2K attribute memory
	16K PCG ram (up to 32K supported)



High resolution video is sort of MSX like but cruder. The character memory is
filled with unique character codes and the character ram is loaded with the
bit patterns. Also it's banked and banked so will be horrible to program and
we'll need graphics mode support for other modes


